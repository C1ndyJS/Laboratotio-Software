const db = require("../config/db.config");
const bcrypt = require("bcryptjs");
const flightService = require("../services/flightService");

const login = async (req, res) => {
  const { email, password } = req.body;
  try {
    const token = await flightService.login(email, password);
    res.status(200).json({ token });
  } catch (error) {
    res.status(401).json({ error: "Credenciales invÃ¡lidas" });
  }
};

// Registrar un nuevo usuario (opcional si decides tener registro)
const registro = async (username, nombreCompleto, email, password, genero, cedula) => {
  try {
    const hashedPassword = await bcrypt.hash(password, 10);

    return new Promise((resolve, reject) => {
      const query = `INSERT INTO users (username, nombreCompleto, email, password, genero, cedula) VALUES (?, ?, ?, ?, ?, ?)`;
      const values = [username, nombreCompleto, email, hashedPassword, genero, cedula];
      
      db.query(query, values, (err, results) => {
        if (err) {
          reject(err);
        } else {
          resolve({ id: results.insertId, username, email });
        }
      });
    });
  } catch (error) {
    throw new Error("Error al registrar el usuario");
  }
};


// Obtener todos los vuelos
const getAllFlights = async (req, res) => {
  try {
    const flights = await flightService.getAllFlights();
    res.status(200).json(flights);
  } catch (error) {
    res.status(500).json({ error: "Error al obtener los vuelos" });
  }
};

// Crear una nueva reserva de vuelo
const createFlight = async (req, res) => {
  const { flightDetails } = req.body;
  try {
    const newFlight = await flightService.createFlight(flightDetails);
    res.status(201).json(newFlight);
  } catch (error) {
    res.status(500).json({ error: "Error al crear el vuelo" });
  }
};

module.exports = {
  login,
  registro,
  getAllFlights,
  createFlight,
};
