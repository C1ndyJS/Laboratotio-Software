const flightService = require("../services/flightService");

const login = async (req, res) => {
  const { email, password } = req.body;
  try {
    const token = await flightService.login(email, password);
    res.status(200).json({ token });
  } catch (error) {
    res.status(401).json({ error: "Credenciales inválidas" });
  }
};

// Registrar un nuevo usuario (opcional si decides tener registro)
const register = require("../services/flightService");

const register = async (req, res) => {
  const { username, nombreCompleto, email, password, genero, cedula } = req.body;
  
  try {
    const newUser = await flightService.register(username, nombreCompleto, email, password, genero, cedula);
    res.status(201).json(newUser);
  } catch (error) {
    res.status(500).json({ error: "Error al registrar el usuario" });
  }
};


// Obtener todos los vuelos
const getAllFlights = async (req, res) => {
  try {
    const flights = await flightService.getAllFlights();
    res.status(200).json(flights);
  } catch (error) {
    res.status(500).json({ error: "Error al obtener los vuelos" });
  }
};

// Crear una nueva reserva de vuelo
const createFlight = async (req, res) => {
  const { flightCode, date, time, origin, destination, duration, isInternational, localTimeAdjustment, estimatedArrival, costPerPerson } = req.body;

  // Verificar que todos los datos requeridos estén presentes
  if (!flightCode || !date || !time || !origin || !destination || !duration || !costPerPerson) {
    return res.status(400).json({ message: "Datos incompletos" });
  }

  // Validación adicional (ejemplo)
  if (isNaN(costPerPerson)) {
    return res.status(400).json({ message: "El costo por persona debe ser un número válido" });
  }

  try {
    // Código para crear el vuelo en la base de datos
    const result = await db.query("INSERT INTO flights SET ?", {
      CodigoVuelo: flightCode,
      FechaVuelo: date,
      HoraSalida: time,
      Origen: origin,
      Destino: destination,
      DuracionVuelo: duration,
      EsInternacional: isInternational ? 1 : 0,
      CostoPorPersona: costPerPerson,
      HoraLlegadaLocal: estimatedArrival,
    });

    res.status(201).json({ message: "Vuelo creado exitosamente", flightId: result.insertId });
  } catch (err) {
    console.error("Error al crear el vuelo:", err);
    res.status(500).json({ message: "Error al crear el vuelo" });
  }
};


module.exports = {
  login,
  register,
  getAllFlights,
  createFlight,
};
